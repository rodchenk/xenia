/*
 * generated by Xtext 2.17.0
 */
package com.foliage.xenia.serializer;

import com.foliage.xenia.services.XeniaGrammarAccess;
import com.foliage.xenia.xenia.Entity;
import com.foliage.xenia.xenia.LinkedProperty;
import com.foliage.xenia.xenia.MappedEntity;
import com.foliage.xenia.xenia.Model;
import com.foliage.xenia.xenia.Site;
import com.foliage.xenia.xenia.XeniaPackage;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class XeniaSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private XeniaGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == XeniaPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XeniaPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case XeniaPackage.LINKED_PROPERTY:
				sequence_LinkedProperty(context, (LinkedProperty) semanticObject); 
				return; 
			case XeniaPackage.MAPPED_ENTITY:
				sequence_MappedEntity(context, (MappedEntity) semanticObject); 
				return; 
			case XeniaPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case XeniaPackage.SITE:
				sequence_Site(context, (Site) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     ((appName=ID sites+=Site sites+=Site*) | (prop=Property name=ID))
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LinkedProperty returns LinkedProperty
	 *
	 * Constraint:
	 *     (name=ID inner_name=ID)
	 */
	protected void sequence_LinkedProperty(ISerializationContext context, LinkedProperty semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XeniaPackage.Literals.LINKED_PROPERTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XeniaPackage.Literals.LINKED_PROPERTY__NAME));
			if (transientValues.isValueTransient(semanticObject, XeniaPackage.Literals.LINKED_PROPERTY__INNER_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XeniaPackage.Literals.LINKED_PROPERTY__INNER_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLinkedPropertyAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getLinkedPropertyAccess().getInner_nameIDTerminalRuleCall_2_0(), semanticObject.getInner_name());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MappedEntity returns MappedEntity
	 *
	 * Constraint:
	 *     (prop=MappedProperty sites+=LinkedProperty*)
	 */
	protected void sequence_MappedEntity(ISerializationContext context, MappedEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     ((entities+=Entity+ mapped_entities+=MappedEntity+) | mapped_entities+=MappedEntity+)?
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Site returns Site
	 *
	 * Constraint:
	 *     (name=ID | (name=ID sites+=Site sites+=Site*))
	 */
	protected void sequence_Site(ISerializationContext context, Site semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
