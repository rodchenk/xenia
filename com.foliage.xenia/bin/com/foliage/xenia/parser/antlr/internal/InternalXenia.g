/*
 * generated by Xtext 2.17.0
 */
grammar InternalXenia;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.foliage.xenia.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.foliage.xenia.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.foliage.xenia.services.XeniaGrammarAccess;

}

@parser::members {

 	private XeniaGrammarAccess grammarAccess;

    public InternalXeniaParser(TokenStream input, XeniaGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected XeniaGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getEntitiesEntityParserRuleCall_0());
			}
			lv_entities_0_0=ruleEntity
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"entities",
					lv_entities_0_0,
					"com.foliage.xenia.Xenia.Entity");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	iv_ruleEntity=ruleEntity
	{ $current=$iv_ruleEntity.current; }
	EOF;

// Rule Entity
ruleEntity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getEntityAccess().getPropertyParserRuleCall_0_0());
			}
			ruleProperty
			{
				afterParserOrEnumRuleCall();
			}
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getEntityAccess().getColonKeyword_0_1());
			}
			(
				(
					lv_name_2_0=RULE_ID
					{
						newLeafNode(lv_name_2_0, grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEntityRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getEntityAccess().getEntityAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getEntityAccess().getXtendedPropertyParserRuleCall_1_1());
			}
			ruleXtendedProperty
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleProperty
entryRuleProperty returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	iv_ruleProperty=ruleProperty
	{ $current=$iv_ruleProperty.current.getText(); }
	EOF;

// Rule Property
ruleProperty returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='app'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPropertyAccess().getAppKeyword_0());
		}
		    |
		kw='with'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPropertyAccess().getWithKeyword_1());
		}
		    |
		kw='sitemap'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPropertyAccess().getSitemapKeyword_2());
		}
	)
;

// Entry rule entryRuleXtendedProperty
entryRuleXtendedProperty returns [String current=null]:
	{ newCompositeNode(grammarAccess.getXtendedPropertyRule()); }
	iv_ruleXtendedProperty=ruleXtendedProperty
	{ $current=$iv_ruleXtendedProperty.current.getText(); }
	EOF;

// Rule XtendedProperty
ruleXtendedProperty returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='sites'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getXtendedPropertyAccess().getSitesKeyword_0());
		}
		    |
		kw='map'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getXtendedPropertyAccess().getMapKeyword_1());
		}
		    |
		kw='info'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getXtendedPropertyAccess().getInfoKeyword_2());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
