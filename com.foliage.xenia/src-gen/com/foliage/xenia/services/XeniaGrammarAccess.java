/*
 * generated by Xtext 2.17.0
 */
package com.foliage.xenia.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class XeniaGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.foliage.xenia.Xenia.Model");
		private final Assignment cEntitiesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEntitiesEntityParserRuleCall_0 = (RuleCall)cEntitiesAssignment.eContents().get(0);
		
		//Model:
		//	entities+=Entity*;
		@Override public ParserRule getRule() { return rule; }
		
		//entities+=Entity*
		public Assignment getEntitiesAssignment() { return cEntitiesAssignment; }
		
		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_0() { return cEntitiesEntityParserRuleCall_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.foliage.xenia.Xenia.Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cEntityAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cXtendedPropertyParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Entity:
		//	Property ':' name=ID | {Entity} XtendedProperty;
		@Override public ParserRule getRule() { return rule; }
		
		//Property ':' name=ID | {Entity} XtendedProperty
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Property ':' name=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//Property
		public RuleCall getPropertyParserRuleCall_0_0() { return cPropertyParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }
		
		//{Entity} XtendedProperty
		public Group getGroup_1() { return cGroup_1; }
		
		//{Entity}
		public Action getEntityAction_1_0() { return cEntityAction_1_0; }
		
		//XtendedProperty
		public RuleCall getXtendedPropertyParserRuleCall_1_1() { return cXtendedPropertyParserRuleCall_1_1; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.foliage.xenia.Xenia.Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAppKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSitemapKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Property:
		//	'app' | 'with' | 'sitemap';
		@Override public ParserRule getRule() { return rule; }
		
		//'app' | 'with' | 'sitemap'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'app'
		public Keyword getAppKeyword_0() { return cAppKeyword_0; }
		
		//'with'
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }
		
		//'sitemap'
		public Keyword getSitemapKeyword_2() { return cSitemapKeyword_2; }
	}
	public class XtendedPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.foliage.xenia.Xenia.XtendedProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSitesKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMapKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cInfoKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//XtendedProperty:
		//	'sites' | 'map' | 'info';
		@Override public ParserRule getRule() { return rule; }
		
		//'sites' | 'map' | 'info'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'sites'
		public Keyword getSitesKeyword_0() { return cSitesKeyword_0; }
		
		//'map'
		public Keyword getMapKeyword_1() { return cMapKeyword_1; }
		
		//'info'
		public Keyword getInfoKeyword_2() { return cInfoKeyword_2; }
	}
	public class GreetingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.foliage.xenia.Xenia.Greeting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHelloKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Greeting:
		//	'Hello' name=ID '!';
		@Override public ParserRule getRule() { return rule; }
		
		//'Hello' name=ID '!'
		public Group getGroup() { return cGroup; }
		
		//'Hello'
		public Keyword getHelloKeyword_0() { return cHelloKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }
	}
	
	
	private final ModelElements pModel;
	private final EntityElements pEntity;
	private final PropertyElements pProperty;
	private final XtendedPropertyElements pXtendedProperty;
	private final GreetingElements pGreeting;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public XeniaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pEntity = new EntityElements();
		this.pProperty = new PropertyElements();
		this.pXtendedProperty = new XtendedPropertyElements();
		this.pGreeting = new GreetingElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.foliage.xenia.Xenia".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	entities+=Entity*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Entity:
	//	Property ':' name=ID | {Entity} XtendedProperty;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Property:
	//	'app' | 'with' | 'sitemap';
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//XtendedProperty:
	//	'sites' | 'map' | 'info';
	public XtendedPropertyElements getXtendedPropertyAccess() {
		return pXtendedProperty;
	}
	
	public ParserRule getXtendedPropertyRule() {
		return getXtendedPropertyAccess().getRule();
	}
	
	//Greeting:
	//	'Hello' name=ID '!';
	public GreetingElements getGreetingAccess() {
		return pGreeting;
	}
	
	public ParserRule getGreetingRule() {
		return getGreetingAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
