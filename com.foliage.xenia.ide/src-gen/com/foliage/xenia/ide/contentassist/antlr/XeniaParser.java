/*
 * generated by Xtext 2.17.0
 */
package com.foliage.xenia.ide.contentassist.antlr;

import com.foliage.xenia.ide.contentassist.antlr.internal.InternalXeniaParser;
import com.foliage.xenia.services.XeniaGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class XeniaParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(XeniaGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, XeniaGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEntityAccess().getAlternatives(), "rule__Entity__Alternatives");
			builder.put(grammarAccess.getModeAccess().getAlternatives(), "rule__Mode__Alternatives");
			builder.put(grammarAccess.getSuperSiteAccess().getAlternatives(), "rule__SuperSite__Alternatives");
			builder.put(grammarAccess.getMappedEntityAccess().getAlternatives(), "rule__MappedEntity__Alternatives");
			builder.put(grammarAccess.getInfoEntryAccess().getAlternatives(), "rule__InfoEntry__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getHeaderAccess().getGroup(), "rule__Header__Group__0");
			builder.put(grammarAccess.getHeaderAccess().getGroup_6(), "rule__Header__Group_6__0");
			builder.put(grammarAccess.getEntityAccess().getGroup_0(), "rule__Entity__Group_0__0");
			builder.put(grammarAccess.getEntityAccess().getGroup_1(), "rule__Entity__Group_1__0");
			builder.put(grammarAccess.getEntityAccess().getGroup_2(), "rule__Entity__Group_2__0");
			builder.put(grammarAccess.getSiteWithModalAccess().getGroup(), "rule__SiteWithModal__Group__0");
			builder.put(grammarAccess.getSiteWithModalAccess().getGroup_6(), "rule__SiteWithModal__Group_6__0");
			builder.put(grammarAccess.getMappedEntityAccess().getGroup_0(), "rule__MappedEntity__Group_0__0");
			builder.put(grammarAccess.getMappedEntityAccess().getGroup_0_4(), "rule__MappedEntity__Group_0_4__0");
			builder.put(grammarAccess.getMappedEntityAccess().getGroup_1(), "rule__MappedEntity__Group_1__0");
			builder.put(grammarAccess.getMappedEntityAccess().getGroup_1_4(), "rule__MappedEntity__Group_1_4__0");
			builder.put(grammarAccess.getInfoPropertyAccess().getGroup(), "rule__InfoProperty__Group__0");
			builder.put(grammarAccess.getInfoPropertyAccess().getGroup_3(), "rule__InfoProperty__Group_3__0");
			builder.put(grammarAccess.getInfoEntityAccess().getGroup(), "rule__InfoEntity__Group__0");
			builder.put(grammarAccess.getSiteAccess().getGroup(), "rule__Site__Group__0");
			builder.put(grammarAccess.getLinkedPropertyAccess().getGroup(), "rule__LinkedProperty__Group__0");
			builder.put(grammarAccess.getRedirectPageAccess().getGroup(), "rule__RedirectPage__Group__0");
			builder.put(grammarAccess.getRedirectPageAccess().getGroup_1(), "rule__RedirectPage__Group_1__0");
			builder.put(grammarAccess.getModelAccess().getHeadersAssignment_0(), "rule__Model__HeadersAssignment_0");
			builder.put(grammarAccess.getModelAccess().getEntitiesAssignment_1(), "rule__Model__EntitiesAssignment_1");
			builder.put(grammarAccess.getModelAccess().getMapped_entitiesAssignment_2(), "rule__Model__Mapped_entitiesAssignment_2");
			builder.put(grammarAccess.getHeaderAccess().getAppNameAssignment_1(), "rule__Header__AppNameAssignment_1");
			builder.put(grammarAccess.getHeaderAccess().getSitesAssignment_5(), "rule__Header__SitesAssignment_5");
			builder.put(grammarAccess.getHeaderAccess().getSitesAssignment_6_1(), "rule__Header__SitesAssignment_6_1");
			builder.put(grammarAccess.getEntityAccess().getTechAssignment_0_2(), "rule__Entity__TechAssignment_0_2");
			builder.put(grammarAccess.getEntityAccess().getPathAssignment_1_2(), "rule__Entity__PathAssignment_1_2");
			builder.put(grammarAccess.getEntityAccess().getModeAssignment_2_2(), "rule__Entity__ModeAssignment_2_2");
			builder.put(grammarAccess.getSiteWithModalAccess().getNameAssignment_1(), "rule__SiteWithModal__NameAssignment_1");
			builder.put(grammarAccess.getSiteWithModalAccess().getSitesAssignment_5(), "rule__SiteWithModal__SitesAssignment_5");
			builder.put(grammarAccess.getSiteWithModalAccess().getSitesAssignment_6_1(), "rule__SiteWithModal__SitesAssignment_6_1");
			builder.put(grammarAccess.getMappedEntityAccess().getInfoPropsAssignment_0_3(), "rule__MappedEntity__InfoPropsAssignment_0_3");
			builder.put(grammarAccess.getMappedEntityAccess().getInfoPropsAssignment_0_4_1(), "rule__MappedEntity__InfoPropsAssignment_0_4_1");
			builder.put(grammarAccess.getMappedEntityAccess().getLinkedPropsAssignment_1_3(), "rule__MappedEntity__LinkedPropsAssignment_1_3");
			builder.put(grammarAccess.getMappedEntityAccess().getLinkedPropsAssignment_1_4_1(), "rule__MappedEntity__LinkedPropsAssignment_1_4_1");
			builder.put(grammarAccess.getInfoPropertyAccess().getPageAssignment_0(), "rule__InfoProperty__PageAssignment_0");
			builder.put(grammarAccess.getInfoPropertyAccess().getEntitiesAssignment_2(), "rule__InfoProperty__EntitiesAssignment_2");
			builder.put(grammarAccess.getInfoPropertyAccess().getEntitiesAssignment_3_1(), "rule__InfoProperty__EntitiesAssignment_3_1");
			builder.put(grammarAccess.getInfoEntityAccess().getEntriesAssignment_0(), "rule__InfoEntity__EntriesAssignment_0");
			builder.put(grammarAccess.getInfoEntityAccess().getInfoValueAssignment_2(), "rule__InfoEntity__InfoValueAssignment_2");
			builder.put(grammarAccess.getSiteAccess().getNameAssignment_1(), "rule__Site__NameAssignment_1");
			builder.put(grammarAccess.getLinkedPropertyAccess().getNameAssignment_0(), "rule__LinkedProperty__NameAssignment_0");
			builder.put(grammarAccess.getLinkedPropertyAccess().getPageAssignment_3(), "rule__LinkedProperty__PageAssignment_3");
			builder.put(grammarAccess.getRedirectPageAccess().getSiteAssignment_0(), "rule__RedirectPage__SiteAssignment_0");
			builder.put(grammarAccess.getRedirectPageAccess().getSiteAssignment_1_1(), "rule__RedirectPage__SiteAssignment_1_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private XeniaGrammarAccess grammarAccess;

	@Override
	protected InternalXeniaParser createParser() {
		InternalXeniaParser result = new InternalXeniaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public XeniaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(XeniaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
