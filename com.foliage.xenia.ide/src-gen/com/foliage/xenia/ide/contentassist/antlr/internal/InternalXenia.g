/*
 * generated by Xtext 2.17.0
 */
grammar InternalXenia;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package com.foliage.xenia.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.foliage.xenia.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import com.foliage.xenia.services.XeniaGrammarAccess;

}
@parser::members {
	private XeniaGrammarAccess grammarAccess;

	public void setGrammarAccess(XeniaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getEntitiesAssignment()); }
		(rule__Model__EntitiesAssignment)*
		{ after(grammarAccess.getModelAccess().getEntitiesAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEntity
entryRuleEntity
:
{ before(grammarAccess.getEntityRule()); }
	 ruleEntity
{ after(grammarAccess.getEntityRule()); } 
	 EOF 
;

// Rule Entity
ruleEntity 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEntityAccess().getAlternatives()); }
		(rule__Entity__Alternatives)
		{ after(grammarAccess.getEntityAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProperty
entryRuleProperty
:
{ before(grammarAccess.getPropertyRule()); }
	 ruleProperty
{ after(grammarAccess.getPropertyRule()); } 
	 EOF 
;

// Rule Property
ruleProperty 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPropertyAccess().getAlternatives()); }
		(rule__Property__Alternatives)
		{ after(grammarAccess.getPropertyAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXtendedProperty
entryRuleXtendedProperty
:
{ before(grammarAccess.getXtendedPropertyRule()); }
	 ruleXtendedProperty
{ after(grammarAccess.getXtendedPropertyRule()); } 
	 EOF 
;

// Rule XtendedProperty
ruleXtendedProperty 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXtendedPropertyAccess().getAlternatives()); }
		(rule__XtendedProperty__Alternatives)
		{ after(grammarAccess.getXtendedPropertyAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntityAccess().getGroup_0()); }
		(rule__Entity__Group_0__0)
		{ after(grammarAccess.getEntityAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getEntityAccess().getGroup_1()); }
		(rule__Entity__Group_1__0)
		{ after(grammarAccess.getEntityAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyAccess().getAppKeyword_0()); }
		'app'
		{ after(grammarAccess.getPropertyAccess().getAppKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyAccess().getWithKeyword_1()); }
		'with'
		{ after(grammarAccess.getPropertyAccess().getWithKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyAccess().getSitemapKeyword_2()); }
		'sitemap'
		{ after(grammarAccess.getPropertyAccess().getSitemapKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XtendedProperty__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXtendedPropertyAccess().getSitesKeyword_0()); }
		'sites'
		{ after(grammarAccess.getXtendedPropertyAccess().getSitesKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getXtendedPropertyAccess().getMapKeyword_1()); }
		'map'
		{ after(grammarAccess.getXtendedPropertyAccess().getMapKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getXtendedPropertyAccess().getInfoKeyword_2()); }
		'info'
		{ after(grammarAccess.getXtendedPropertyAccess().getInfoKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group_0__0__Impl
	rule__Entity__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getPropertyParserRuleCall_0_0()); }
	ruleProperty
	{ after(grammarAccess.getEntityAccess().getPropertyParserRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group_0__1__Impl
	rule__Entity__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getColonKeyword_0_1()); }
	':'
	{ after(grammarAccess.getEntityAccess().getColonKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getNameAssignment_0_2()); }
	(rule__Entity__NameAssignment_0_2)
	{ after(grammarAccess.getEntityAccess().getNameAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group_1__0__Impl
	rule__Entity__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getEntityAction_1_0()); }
	()
	{ after(grammarAccess.getEntityAccess().getEntityAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getXtendedPropertyParserRuleCall_1_1()); }
	ruleXtendedProperty
	{ after(grammarAccess.getEntityAccess().getXtendedPropertyParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__EntitiesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getEntitiesEntityParserRuleCall_0()); }
		ruleEntity
		{ after(grammarAccess.getModelAccess().getEntitiesEntityParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__NameAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_0_2_0()); }
		RULE_ID
		{ after(grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
